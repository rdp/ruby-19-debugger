diff --git a/iseq.c b/iseq.c
index 3ab1457..8b5bcfe 100644
--- a/iseq.c
+++ b/iseq.c
@@ -93,7 +93,7 @@ iseq_free(void *ptr)
     RUBY_FREE_LEAVE("iseq");
 }

-static void
+void
 iseq_mark(void *ptr)
 {
     RUBY_MARK_ENTER("iseq");
@@ -541,6 +541,47 @@ rb_iseq_arity(VALUE iseqval)
     return (iseq) ? INT2FIX(get_iseq_arity(iseq)) : Qnil;
 }

+const char *
+source_container_type(VALUE fileval)
+{
+    const char *filename = RSTRING_PTR(fileval);
+    size_t len = strlen(filename);
+
+    /* FIXME: Looking for (...) is a hack that I would love to know how
+       to remove. Probably Ruby has to be changed to record this kind
+       of information.
+     */
+    if (len > 0 &&
+	((filename[0] == '(' && filename[len-1] == ')')
+	 || 0 == strncmp(filename, "<compiled>",
+			 sizeof("<compiled>"))))
+	return "string";
+    else
+	return "file";
+}
+
+
+/**
+ * Return an Array tuple of source container. This is either ["file"
+ * *filename* *absolute-file*] if the instruction sequence came from a file, or
+ * ["string", *source-string*] if it came from "eval".
+ * TODO: could have come from other sources too.
+ */
+VALUE
+rb_iseq_source_container(VALUE iseqval)
+{
+    if (Qnil == iseqval) return Qnil;
+    else {
+	rb_iseq_t *iseq;
+	VALUE fileval;
+	GetISeqPtr(iseqval, iseq);
+	fileval = iseq->location.path;
+	return rb_ary_new3(3, rb_str_new2(source_container_type(fileval)),
+			   fileval, iseq->location.absolute_path);
+    }
+}
+
+
 static VALUE
 rb_iseq_new_with_bopt_and_opt(NODE *node, VALUE name, VALUE path, VALUE absolute_path, VALUE first_lineno,
 			      VALUE parent, enum iseq_type type, VALUE bopt,
@@ -2636,6 +2677,7 @@ Init_ISeq(void)
     rb_define_method(rb_cISeq, "encoded",          rb_iseq_iseq_encoded, 0) ;
     rb_define_method(rb_cISeq, "equal?",           rb_iseq_equal, 1) ;
     rb_define_method(rb_cISeq, "eval_source",      rb_iseq_eval_source, 0);
+    rb_define_method(rb_cISeq, "source_container", rb_iseq_source_container, 0) ;
     rb_define_method(rb_cISeq, "iseq_size",        rb_iseq_iseq_size, 0) ;
     rb_define_method(rb_cISeq, "klass",            rb_iseq_klass, 0) ;
     rb_define_method(rb_cISeq, "local_iseq",       rb_iseq_local_iseq, 0) ;
diff --git a/iseq.h b/iseq.h
index e5fda85..1e69617 100644
--- a/iseq.h
+++ b/iseq.h
@@ -26,6 +26,7 @@ VALUE rb_iseq_load(VALUE data, VALUE parent, VALUE opt);
 VALUE rb_iseq_parameters(const rb_iseq_t *iseq, int is_proc);
 struct st_table *ruby_insn_make_insn_table(void);
 VALUE iseq_alloc_shared(VALUE klass);
+const char *source_container_type(VALUE fileval);
 unsigned int rb_iseq_line_no(const rb_iseq_t *iseq, size_t pos);

 int rb_iseq_line_trace_each(VALUE iseqval, int (*func)(int line, rb_event_flag_t *events_ptr, void *d), void *data);
@@ -37,6 +38,7 @@ rb_iseq_t *rb_method_get_iseq(VALUE body);
 rb_iseq_t *rb_proc_get_iseq(VALUE proc, int *is_proc);
 int method_arity(VALUE);
 int get_iseq_arity(rb_iseq_t *iseq);
+VALUE rb_binding_frame_new(void *vth, void *vcfp);

 struct rb_compile_option_struct {
     int inline_const_cache;
diff --git a/proc.c b/proc.c
index 9fa494a..5df9cae 100644
--- a/proc.c
+++ b/proc.c
@@ -945,6 +945,23 @@ rb_proc_get_iseq(VALUE self, int *is_proc)
     return iseq;
 }

+/*
+ *  call-seq:
+ *  Method#iseq -> RubyVM::InstructionSequence
+ *
+ *  Returns the instruction sequence of a Method object.
+ */
+VALUE
+rb_method_iseq(VALUE self)
+{
+    VALUE rb_iseq;
+    rb_iseq_t *iseq = rb_method_get_iseq(self);
+    if (!iseq) return Qnil;
+    rb_iseq = iseq_alloc_shared(rb_cISeq);
+    RDATA(rb_iseq)->data = iseq;
+    return rb_iseq;
+}
+
 static VALUE
 iseq_location(rb_iseq_t *iseq)
 {
@@ -2779,6 +2796,7 @@ Init_Proc(void)
     rb_define_method(rb_cMethod, "unbind", method_unbind, 0);
     rb_define_method(rb_cMethod, "source_location", rb_method_location, 0);
     rb_define_method(rb_cMethod, "parameters", rb_method_parameters, 0);
+    rb_define_method(rb_cMethod, "iseq",       rb_method_iseq, 0);
     rb_define_method(rb_mKernel, "method", rb_obj_method, 1);
     rb_define_method(rb_mKernel, "public_method", rb_obj_public_method, 1);
     rb_define_method(rb_mKernel, "singleton_method", rb_obj_singleton_method, 1);
diff --git a/test/debugger-ext/test-method.rb b/test/debugger-ext/test-method.rb
index 000ad2f..c79fed1 100644
--- a/test/debugger-ext/test-method.rb
+++ b/test/debugger-ext/test-method.rb
@@ -18,5 +18,7 @@ class TestMethod < Test::Unit::TestCase
         assert_equal("C function", File.method(:basename).type)
         # Array.map is an unbound method
         assert_equal("C function", Array.instance_method(:map).type)
+        # puts m.iseq
+        assert m.iseq.kind_of?(RubyVM::InstructionSequence)
     end
 end
diff --git a/test/debugger-ext/test-source-container.rb b/test/debugger-ext/test-source-container.rb
new file mode 100644
index 0000000..b13550f
--- /dev/null
+++ b/test/debugger-ext/test-source-container.rb
@@ -0,0 +1,23 @@
+require 'test/unit'
+
+# Test source_location and source_container.
+class TestSourceContainer < Test::Unit::TestCase
+
+    def test_iseq_source_container
+        test_basic_lineno = __LINE__ - 1
+        tup = method(:test_iseq_source_container).iseq.source_container
+        tup[1] = File.basename(tup[1])
+        assert_equal(['file',  File.basename(__FILE__)], tup[0..1])
+
+        eval('def foo; 5 end')
+        tup = method(:foo).iseq.source_container
+        assert_equal('string',  tup[0])
+
+        iseq = RubyVM::InstructionSequence.compile("1+2")
+        assert_equal('string',  iseq.source_container[0])
+    end
+end
+
+# We want to double-check we didn't mess up any pointers somewhere along
+# the line.
+at_exit { GC.start  }
diff --git a/vm_core.h b/vm_core.h
index 851bdfe..51445cd 100644
--- a/vm_core.h
+++ b/vm_core.h
@@ -328,6 +328,16 @@ struct rb_iseq_struct {
     /* If this instruction sequence came from eval, the string of the
        source as a String. */
     VALUE source;
+
+    /* If we are saving tree nodes (a compile option), then tree_node
+       is the internal parse tree node representation for this
+       instruction sequence.
+    */
+    NODE *tree_node;
+    int in_use;  /* Reference count of number of times and instruction
+		    sequence is in use such as via thread_frame object
+		    access or is stored in ISEQS__ or SCRIPT_ISEQS.
+		  */
 };

 enum ruby_special_exceptions {
