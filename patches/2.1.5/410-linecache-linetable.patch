diff --git a/iseq.c b/iseq.c
index 8b5bcfe..97deb46 100644
--- a/iseq.c
+++ b/iseq.c
@@ -2617,6 +2617,66 @@ rb_iseq_local_name(VALUE iseqval, VALUE val)
     return Qnil;
 }

+/*
+ * call-seq:
+ *     RubyVM::InstructionSequence#offsetlines -> Hash[Fixnum] -> [Fixnum]
+ *
+ * Returns a hash. The keys in the hash form the VM offsets of the
+ * instructions.  The value of the hash for a given offset is a list
+ * of line numbers associated with that offset.
+ */
+VALUE iseq_offsetlines(VALUE iseqval)
+{
+    rb_iseq_t *iseq;
+    VALUE offsetlines = rb_hash_new();
+    unsigned long i, size;
+    struct iseq_line_info_entry *table;
+
+    GetISeqPtr(iseqval, iseq);
+
+    size = iseq->line_info_size;
+    table = iseq->line_info_table;
+
+    for (i = 0; i < size; i++) {
+	VALUE ary = rb_ary_new2(1);
+	rb_ary_push(ary, INT2FIX(table[i].line_no));
+	rb_hash_aset(offsetlines, UINT2NUM(table[i].position), ary);
+    }
+    return offsetlines;
+}
+
+/*
+ * call-seq:
+ *     RubyVM::InstructionSequence#offset2lines(offset) -> [Fixnum]
+ *
+ * Returns an Array or nil. If offset is found then return the list of
+ * lines associated with that offset. If the offset isn't found return nil.
+ */
+VALUE iseq_offset2lines(VALUE iseqval, VALUE offsetval)
+{
+    rb_iseq_t *iseq;
+
+    GetISeqPtr(iseqval, iseq);
+
+    if (FIXNUM_P(offsetval)) {
+	unsigned long i, size;
+	size_t offset = FIX2UINT(offsetval);
+	struct iseq_line_info_entry *table;
+
+	size = iseq->line_info_size;
+	table = iseq->line_info_table;
+
+	for (i = 0; i < size; i++) {
+	    if (table[i].position == offset) {
+		VALUE ary = rb_ary_new2(1);
+		rb_ary_push(ary, UINT2NUM(table[i].line_no));
+		return ary;
+	    }
+	}
+    }
+    return Qnil;
+}
+
 void
 Init_ISeq(void)
 {
@@ -2684,6 +2744,8 @@ Init_ISeq(void)
     rb_define_method(rb_cISeq, "local_name",       rb_iseq_local_name, 1) ;
     rb_define_method(rb_cISeq, "local_size",       rb_iseq_local_size, 0) ;
     rb_define_method(rb_cISeq, "local_table_size", rb_iseq_local_table_size, 0) ;
+    rb_define_method(rb_cISeq, "offset2lines",     iseq_offset2lines, 1) ;
+    rb_define_method(rb_cISeq, "offsetlines",      iseq_offsetlines, 0) ;
     rb_define_method(rb_cISeq, "parent",           rb_iseq_parent, 0) ;
     rb_define_method(rb_cISeq, "orig",             rb_iseq_orig, 0) ;
     rb_define_method(rb_cISeq, "self",             rb_iseq_self, 0) ;
diff --git a/test/debugger-ext/test-iseq-linetable.rb b/test/debugger-ext/test-iseq-linetable.rb
new file mode 100644
index 0000000..bd5e158
--- /dev/null
+++ b/test/debugger-ext/test-iseq-linetable.rb
@@ -0,0 +1,12 @@
+require 'test/unit'
+
+# Things involving offset2lines and offsetlines
+# or more generally things we need in linecache.
+class TestISeqLineTable < Test::Unit::TestCase
+  def test_basic
+      iseq = RubyVM::InstructionSequence.new("x=1")
+      assert_equal [1], iseq.offset2lines(0)
+      assert iseq.offsetlines.is_a?(Hash)
+      assert iseq.offsetlines.values.all?{|x| x == [1]}
+  end
+end
