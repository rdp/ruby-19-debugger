The PC when we look at a backtrace might not be at a trace instruction
(the start of the statement). When we add a breakpoint we need to add
it at the trace instruction. So iseq.start_insn finds this. Internally
in C you can use rb_iseq_start_insn.


diff --git a/iseq.c b/iseq.c
index e83cb56..820d218 100644
--- a/iseq.c
+++ b/iseq.c
@@ -1441,6 +1441,40 @@ rb_iseq_line_no(const rb_iseq_t *iseq, size_t pos)
     }
 }

+size_t
+rb_iseq_start_insn(const rb_iseq_t *iseq, size_t pos)
+{
+    struct iseq_line_info_entry *entry = get_line_info(iseq, pos);
+    if (entry) {
+	return entry->position;
+    }
+    else {
+	return 0;
+    }
+}
+
+VALUE
+iseq_start_insn(VALUE iseqval, VALUE posval)
+{
+    rb_iseq_t *iseq;
+    struct iseq_line_info_entry *entry;
+
+    GetISeqPtr(iseqval, iseq);
+
+    if (FIXNUM_P(posval)) {
+	size_t pos = FIX2INT(posval);
+	if (entry = get_line_info(iseq, pos)) {
+	    return INT2FIX(entry->position);
+	}
+	else {
+	    return INT2FIX(-1);
+	}
+    } else {
+      rb_raise(rb_eTypeError, "type mismatch: %s given, Fixnum expected",
+	       rb_class2name(CLASS_OF(posval)));
+    }
+}
+
 static VALUE
 id_to_name(ID id, VALUE default_value)
 {
@@ -2937,6 +2971,7 @@ Init_ISeq(void)
     rb_define_method(rb_cISeq, "self",             rb_iseq_self, 0) ;
     rb_define_method(rb_cISeq, "type",             rb_iseq_type, 0) ;
     rb_define_method(rb_cISeq, "iseq_size",        rb_iseq_iseq_size, 0) ;
+    rb_define_method(rb_cISeq, "start_insn",       iseq_start_insn, 1) ;

     Init_Brkpt();

diff --git a/iseq.h b/iseq.h
index 9772140..9027589 100644
--- a/iseq.h
+++ b/iseq.h
@@ -28,6 +28,7 @@ struct st_table *ruby_insn_make_insn_table(void);
 VALUE iseq_alloc_shared(VALUE klass);
 const char *source_container_type(VALUE fileval);
 unsigned int rb_iseq_line_no(const rb_iseq_t *iseq, size_t pos);
+size_t rb_iseq_start_insn(const rb_iseq_t *iseq, size_t pos);

 int rb_iseq_line_trace_each(VALUE iseqval, int (*func)(int line, rb_event_flag_t *events_ptr, void *d), void *data);
 VALUE rb_iseq_line_trace_all(VALUE iseqval);
diff --git a/test/debugger-ext/test-iseq-start-insn.rb b/test/debugger-ext/test-iseq-start-insn.rb
new file mode 100644
index 0000000..fef71a2
--- /dev/null
+++ b/test/debugger-ext/test-iseq-start-insn.rb
@@ -0,0 +1,19 @@
+require 'test/unit'
+class TestISeqFieldAccess2 < Test::Unit::TestCase
+  def runit(line_no)
+      tf = RubyVM::Frame.get(1)
+      pc = tf.pc_offset
+      iseq = tf.iseq
+      start_insn = iseq.start_insn(pc)
+      # puts ; puts iseq.disasm
+      # p start_insn, pc
+      # p iseq.offsetlines
+      assert_equal(iseq.offset2lines(start_insn), [line_no])
+      assert_not_equal(start_insn, pc)
+      return 5
+  end
+  def test_iseq_start_insn
+      x = 10
+      z = runit(__LINE__)
+  end
+end
