Adds Proc#iseq

diff --git a/iseq.h b/iseq.h
index baebfeb..e5fda85 100644
--- a/iseq.h
+++ b/iseq.h
@@ -25,6 +25,7 @@ void rb_iseq_add_mark_object(rb_iseq_t *iseq, VALUE obj);
 VALUE rb_iseq_load(VALUE data, VALUE parent, VALUE opt);
 VALUE rb_iseq_parameters(const rb_iseq_t *iseq, int is_proc);
 struct st_table *ruby_insn_make_insn_table(void);
+VALUE iseq_alloc_shared(VALUE klass);
 unsigned int rb_iseq_line_no(const rb_iseq_t *iseq, size_t pos);

 int rb_iseq_line_trace_each(VALUE iseqval, int (*func)(int line, rb_event_flag_t *events_ptr, void *d), void *data);
diff --git a/proc.c b/proc.c
index a06caea..9fa494a 100644
--- a/proc.c
+++ b/proc.c
@@ -2625,6 +2625,27 @@ rb_method_type(VALUE self)
     return rb_str_new2(type_str);
 }

+/*
+ *  call-seq:
+ *  Proc#iseq -> RubyVM::InstructionSequence
+ *
+ *  Returns the instruction sequence for a Proc object.
+ */
+VALUE
+rb_proc_iseq(VALUE self)
+{
+    rb_proc_t *proc;
+    rb_iseq_t *iseq;
+    VALUE rb_iseq;
+    GetProcPtr(self, proc);
+    iseq = proc->block.iseq;
+    if (!iseq || !RUBY_VM_NORMAL_ISEQ_P(iseq->self))
+	return Qnil;
+    rb_iseq = iseq_alloc_shared(rb_cISeq);
+    RDATA(rb_iseq)->data = iseq;
+    return rb_iseq;
+}
+
 /*
  *  Document-class: LocalJumpError
  *
@@ -2714,6 +2735,7 @@ Init_Proc(void)
     rb_define_method(rb_cProc, "clone", proc_clone, 0);
     rb_define_method(rb_cProc, "dup", proc_dup, 0);
     rb_define_method(rb_cProc, "hash", proc_hash, 0);
+    rb_define_method(rb_cProc, "iseq", rb_proc_iseq, 0);
     rb_define_method(rb_cProc, "to_s", proc_to_s, 0);
     rb_define_alias(rb_cProc, "inspect", "to_s");
     rb_define_method(rb_cProc, "lambda?", rb_proc_lambda_p, 0);
diff --git a/test/debugger-ext/test-proc.rb b/test/debugger-ext/test-proc.rb
new file mode 100644
index 0000000..7737aef
--- /dev/null
+++ b/test/debugger-ext/test-proc.rb
@@ -0,0 +1,7 @@
+require 'test/unit'
+
+class TestProc < Test::Unit::TestCase
+    def test_proc_iseq
+      assert proc{ 5}.iseq.kind_of?(RubyVM::InstructionSequence)
+    end
+end
