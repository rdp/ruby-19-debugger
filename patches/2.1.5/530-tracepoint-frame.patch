Add "frame" method to tracepoint. Requires frame patch to be installed first.

diff --git a/test/debugger-ext/test-tracepoint.rb b/test/debugger-ext/test-tracepoint.rb
new file mode 100644
index 0000000..1103040
--- /dev/null
+++ b/test/debugger-ext/test-tracepoint.rb
@@ -0,0 +1,18 @@
+require 'test/unit'
+
+class TestTracePoint < Test::Unit::TestCase
+
+    def five(a)
+        5
+    end
+    def test_basic
+        trace = TracePoint.new do |tp|
+            frame = tp.frame
+            assert_equal(tp.lineno, frame.source_location[0])
+        end
+        trace.enable
+        x = 1
+        five(10)
+        trace.disable
+    end
+end
diff --git a/vm_trace.c b/../ruby-2.1.5-debugger/vm_trace.c
index cf7fa6a..1c2c559 100644
--- a/vm_trace.c
+++ b/vm_trace.c
@@ -29,6 +29,10 @@
 #include "vm_core.h"
 #include "eval_intern.h"

+VALUE
+frame_prev(rb_control_frame_t *prev_cfp, rb_thread_t *th,
+	   int n);
+
 /* (1) trace mechanisms */

 typedef struct rb_event_hook_struct {
@@ -690,6 +694,7 @@ symbol2event_flag(VALUE v)
     VALUE sym = rb_convert_type(v, T_SYMBOL, "Symbol", "to_sym");

 #define C(name, NAME) CONST_ID(id, #name); if (sym == ID2SYM(id)) return RUBY_EVENT_##NAME
+    C(brkpt, BRKPT);
     C(line, LINE);
     C(class, CLASS);
     C(end, END);
@@ -975,6 +980,22 @@ tracepoint_attr_self(VALUE tpval)
 }

 /*
+ * Return the generated frame object from event
+ */
+static VALUE
+tracepoint_attr_frame(VALUE tpval)
+{
+    rb_trace_arg_t *trace_arg = get_trace_arg();
+    rb_thread_t *th = trace_arg->th;
+    rb_control_frame_t *cfp = trace_arg->cfp;
+    if (cfp) {
+	return frame_prev(cfp, th, 0);
+    } else {
+	return Qnil;
+    }
+}
+
+/*
  *  Return value from +:return+, +c_return+, and +b_return+ event
  */
 static VALUE
@@ -1258,6 +1279,62 @@ tracepoint_new_s(int argc, VALUE *argv, VALUE self)
 }

 static VALUE
+tracepoint_event_mask_set(int argc, VALUE *argv, VALUE tracepoint)
+{
+    rb_tp_t *tp = tpptr(tracepoint);
+    rb_event_flag_t events = 0;
+    int i;
+
+    if (argc > 0) {
+	for (i=0; i<argc; i++) {
+	    events |= symbol2event_flag(argv[i]);
+	}
+    }
+    else {
+	events = RUBY_EVENT_TRACEPOINT_ALL;
+    }
+    tp->events = events;
+    return tracepoint;
+}
+
+/*
+ * call-seq:
+ *	trace.event_mask -> Array
+ *
+ *  Return the list of event the tracepoint triggers on
+ */
+
+static VALUE
+tracepoint_event_mask(VALUE self)
+{
+    rb_tp_t *tp = tpptr(self);
+    VALUE retval = rb_ary_new();
+    rb_event_flag_t events = tp->events;
+    ID id;
+
+#define C(name, NAME) if (events & RUBY_EVENT_##NAME) { \
+	CONST_ID(id, #name);				\
+	rb_ary_push(retval, ID2SYM(id));		\
+    }
+    C(b_call, B_CALL);
+    C(b_return, B_RETURN);
+    C(brkpt, BRKPT);
+    C(c_call, C_CALL);
+    C(c_return, C_RETURN);
+    C(call, CALL);
+    C(class, CLASS);
+    C(end, END);
+    C(line, LINE);
+    C(raise, RAISE);
+    C(return, RETURN);
+    C(specified_line, SPECIFIED_LINE);
+    C(thread_begin, THREAD_BEGIN);
+    C(thread_end, THREAD_END);
+    return retval;
+}
+#undef C
+
+static VALUE
 tracepoint_trace_s(int argc, VALUE *argv, VALUE self)
 {
     VALUE trace = tracepoint_new_s(argc, argv, self);
@@ -1398,6 +1475,9 @@ Init_vm_trace(void)
      */
     rb_define_singleton_method(rb_cTracePoint, "trace", tracepoint_trace_s, -1);

+    rb_define_method(rb_cTracePoint, "event_mask", tracepoint_event_mask, 0);
+    rb_define_method(rb_cTracePoint, "event_mask_set", tracepoint_event_mask_set, -1);
+
     rb_define_method(rb_cTracePoint, "enable", tracepoint_enable_m, 0);
     rb_define_method(rb_cTracePoint, "disable", tracepoint_disable_m, 0);
     rb_define_method(rb_cTracePoint, "enabled?", rb_tracepoint_enabled_p, 0);
@@ -1414,6 +1494,8 @@ Init_vm_trace(void)
     rb_define_method(rb_cTracePoint, "return_value", tracepoint_attr_return_value, 0);
     rb_define_method(rb_cTracePoint, "raised_exception", tracepoint_attr_raised_exception, 0);

+   rb_define_method(rb_cTracePoint, "frame", tracepoint_attr_frame, 0);
+
     /* initialized for postponed job */

     Init_postponed_job();
