Access to more of the iseq fields: argc, arg_rest, arg_block, offsetlines, offset2line, local_size, local_table_size, iseq_size, arg_simple

diff --git a/iseq.c b/iseq.c
index dc14e28..9365ca9 100644
--- a/iseq.c
@@ -2275,12 +2275,46 @@ rb_iseq_line_trace_specify(VALUE iseqval, VALUE pos, VALUE set)

 extern void Init_Brkpt(void); /* In brkpt.c */

+#define ISEQ_FIELD_METHOD(FIELD)		\
+VALUE					        \
+rb_iseq_##FIELD(VALUE iseqval)			\
+{						\
+  rb_iseq_t *iseq;				\
+  if (Qnil == iseqval) return Qnil;		\
+  GetISeqPtr(iseqval, iseq);			\
+  return iseq->FIELD;				\
+}
+
+ISEQ_FIELD_METHOD(orig) ;
+ISEQ_FIELD_METHOD(self) ;
+
+#define ISEQ_INT_FIELD_METHOD(FIELD)		\
+extern VALUE					\
+rb_iseq_##FIELD(VALUE iseqval)			\
+{						\
+  rb_iseq_t *iseq;				\
+  GetISeqPtr(iseqval, iseq);			\
+  return INT2FIX(iseq->FIELD);			\
+}
+
+ISEQ_INT_FIELD_METHOD(arg_block) ;
+ISEQ_INT_FIELD_METHOD(arg_opts) ;
+ISEQ_INT_FIELD_METHOD(arg_post_len) ;
+ISEQ_INT_FIELD_METHOD(arg_rest) ;
+ISEQ_INT_FIELD_METHOD(arg_simple) ;
+ISEQ_INT_FIELD_METHOD(argc) ;
+ISEQ_INT_FIELD_METHOD(iseq_size) ;
+ISEQ_INT_FIELD_METHOD(local_size) ;
+ISEQ_INT_FIELD_METHOD(local_table_size) ;
+ISEQ_INT_FIELD_METHOD(type) ;
+
 void
 Init_ISeq(void)
 {
     /* declare ::RubyVM::InstructionSequence */
     rb_cISeq = rb_define_class_under(rb_cRubyVM, "InstructionSequence", rb_cObject);
     rb_define_alloc_func(rb_cISeq, iseq_alloc);
+
     rb_define_method(rb_cISeq, "inspect", iseq_inspect, 0);
     rb_define_method(rb_cISeq, "disasm", rb_iseq_disasm, 0);
     rb_define_method(rb_cISeq, "disassemble", rb_iseq_disasm, 0);
@@ -2294,7 +2328,7 @@ Init_ISeq(void)
     rb_define_method(rb_cISeq, "base_label", rb_iseq_base_label, 0);
     rb_define_method(rb_cISeq, "first_lineno", rb_iseq_first_lineno, 0);

-#if 0
+#if 1
     /* Now, it is experimental. No discussions, no tests. */
     /* They can be used from C level. Please give us feedback. */
     rb_define_method(rb_cISeq, "line_trace_all", rb_iseq_line_trace_all, 0);
@@ -2322,6 +2356,28 @@ Init_ISeq(void)
     rb_define_singleton_method(rb_cISeq, "disassemble", iseq_s_disasm, 1);
     rb_define_singleton_method(rb_cISeq, "of", iseq_s_of, 1);

+    /* These are rocky's additions */
+    rb_define_method(rb_cISeq, "arg_block",        rb_iseq_arg_block, 0) ;
+    rb_define_method(rb_cISeq, "arg_opts",         rb_iseq_arg_opts, 0) ;
+    rb_define_method(rb_cISeq, "arg_post_len",     rb_iseq_arg_post_len, 0) ;
+    rb_define_method(rb_cISeq, "arg_rest",         rb_iseq_arg_rest, 0) ;
+    rb_define_method(rb_cISeq, "arg_simple",       rb_iseq_arg_simple, 0) ;
+#ifdef FINISHED
+    rb_define_method(rb_cISeq, "equal?",           iseq_equal, 1) ;
+    rb_define_method(rb_cISeq, "line_range",       iseq_line_range, 0) ;
+    rb_define_method(rb_cISeq, "local_iseq",       iseq_local_iseq, 0) ;
+    rb_define_method(rb_cISeq, "local_name",       iseq_local_name, 1) ;
+    rb_define_method(rb_cISeq, "parent",           iseq_parent, 0) ;
+#endif
+    rb_define_method(rb_cISeq, "iseq_size",        rb_iseq_iseq_size, 0) ;
+    rb_define_method(rb_cISeq, "klass",            rb_iseq_klass, 0) ;
+    rb_define_method(rb_cISeq, "local_size",       rb_iseq_local_size, 0) ;
+    rb_define_method(rb_cISeq, "local_table_size", rb_iseq_local_table_size, 0) ;
+    rb_define_method(rb_cISeq, "orig",             rb_iseq_orig, 0) ;
+    rb_define_method(rb_cISeq, "self",             rb_iseq_self, 0) ;
+    rb_define_method(rb_cISeq, "type",             rb_iseq_type, 0) ;
+    rb_define_method(rb_cISeq, "iseq_size",        rb_iseq_iseq_size, 0) ;
+
     Init_Brkpt();

 }
diff --git a/test/debugger-ext/test-iseq-field-access.rb b/test/debugger-ext/test-iseq-field-access.rb
new file mode 100644
index 0000000..8dc083d
--- /dev/null
+++ b/test/debugger-ext/test-iseq-field-access.rb
@@ -0,0 +1,64 @@
+require 'test/unit'
+
+class TestISeqBrkpt < Test::Unit::TestCase
+
+  def setup
+    @original_compile_option = RubyVM::InstructionSequence.compile_option
+    RubyVM::InstructionSequence.compile_option = {
+      :trace_instruction => false,
+      :specialized_instruction => false
+    }
+  end
+
+  def teardown
+    set_trace_func(nil)
+    RubyVM::InstructionSequence.compile_option = @original_compile_option
+  end
+
+  TYPE2STR = %w(top method block class rescue ensure eval main guard)
+
+  def show_type # :nodoc:
+      results = []
+      tf = RubyVM::Frame.get
+      while tf do
+          is = tf.iseq
+          if is
+              ist = tf.iseq.type
+              isn = TYPE2STR[ist]
+              results << isn
+          end
+          tf = tf.prev
+      end
+      return results
+  end
+
+  def test_type
+      # Create an artificial block, for testing.
+      1.times do
+          got = show_type[0..2] + [show_type[-1]]
+          assert_equal(%w(method block method top), got)
+      end
+  end
+
+  def test_iseq_brkpt
+      iseq = RubyVM::InstructionSequence.compile('x=1; y=2')
+      assert iseq
+      [['arg_block',    -1],
+       ['arg_opts',      0],
+       ['arg_post_len',  0],
+       ['arg_rest'    , -1],
+       ['arg_simple'  ,  1],
+       ['iseq_size'   ,  9],
+       ['klass'       ,  false],
+       ['local_size'  ,  3],
+       ['local_table_size', 2],
+       ['type'        ,  false]].each do |method, expected|
+          assert_equal(expected, iseq.send(method), method)
+      end
+
+      assert iseq.self.kind_of?(RubyVM::InstructionSequence)
+  end
+end
+
+# We want to double-check we didn't mess up any pointers somewhere.
+at_exit { GC.start  }
